package tietorakenne.test;
// Generated by ComTest BEGIN
import java.util.*;
import static org.junit.Assert.*;
import org.junit.*;
import tietorakenne.*;
// Generated by ComTest END

/**
 * Test class made by ComTest
 * @version 2016.04.08 11:00:46 // Generated by ComTest
 *
 */
@SuppressWarnings("all")
public class RekisteriTest {



  // Generated by ComTest BEGIN
  /** 
   * testAnnaKalastaja64 
   * @throws SailoException when error
   */
  @Test
  public void testAnnaKalastaja64() throws SailoException {    // Rekisteri: 64
    Rekisteri rekisteri = new Rekisteri(); 
    Kalastaja kalastaja1 = new Kalastaja(); 
    kalastaja1.luoArvot(); 
    rekisteri.lisaa(kalastaja1); 
    Kalastaja kalastaja2 = new Kalastaja(); 
    kalastaja2.luoArvot(); 
    rekisteri.lisaa(kalastaja2); 
    Kalastaja kalastaja3 = new Kalastaja(); 
    kalastaja3.luoArvot(); 
    rekisteri.lisaa(kalastaja3); 
    assertEquals("From: Rekisteri line: 76", 3, rekisteri.getKalastajia()); 
    assertEquals("From: Rekisteri line: 77", kalastaja1, rekisteri.annaKalastaja(0)); 
    assertEquals("From: Rekisteri line: 78", kalastaja2, rekisteri.annaKalastaja(1)); 
    assertEquals("From: Rekisteri line: 79", kalastaja3, rekisteri.annaKalastaja(2)); 
    rekisteri.lisaa(kalastaja1); assertEquals("From: Rekisteri line: 80", kalastaja1, rekisteri.annaKalastaja(3)); 
    rekisteri.lisaa(kalastaja2); assertEquals("From: Rekisteri line: 81", kalastaja2, rekisteri.annaKalastaja(4)); 
    try {
    rekisteri.lisaa(kalastaja3); 
    fail("Rekisteri: 82 Did not throw IndexOutOfBoundsException");
    } catch(IndexOutOfBoundsException _e_){ _e_.getMessage(); }
    assertEquals("From: Rekisteri line: 83", 5, rekisteri.getKalastajia()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testAnnaPyyntiTiedot98 */
  @Test
  public void testAnnaPyyntiTiedot98() {    // Rekisteri: 98
    Rekisteri rekisteri = new Rekisteri(); 
    Kalastaja kalastaja1 = new Kalastaja(), kalastaja2 = new Kalastaja(); 
    kalastaja1.luoArvot(); 
    kalastaja2.luoArvot(); 
    try {
    rekisteri.lisaa(kalastaja1); 
    fail("Rekisteri: 105 Did not throw SailoException");
    } catch(SailoException _e_){ _e_.getMessage(); }
    try {
    rekisteri.lisaa(kalastaja2); 
    fail("Rekisteri: 106 Did not throw SailoException");
    } catch(SailoException _e_){ _e_.getMessage(); }
    int id1 = kalastaja1.getID(); 
    int id2 = kalastaja2.getID(); 
    PyyntiTieto pyynti1 = new PyyntiTieto(id1), pyynti2 = new PyyntiTieto(id2), pyynti3 = new PyyntiTieto(id1); 
    pyynti1.luoarvot(id1); pyynti2.luoarvot(id2); pyynti3.luoarvot(id1); 
    try {
    rekisteri.lisaa(pyynti1); 
    fail("Rekisteri: 111 Did not throw SailoException");
    } catch(SailoException _e_){ _e_.getMessage(); }
    try {
    rekisteri.lisaa(pyynti2); 
    fail("Rekisteri: 112 Did not throw SailoException");
    } catch(SailoException _e_){ _e_.getMessage(); }
    try {
    rekisteri.lisaa(pyynti3); 
    fail("Rekisteri: 113 Did not throw SailoException");
    } catch(SailoException _e_){ _e_.getMessage(); }
    List<PyyntiTieto> loytyneet; 
    loytyneet = rekisteri.annaPyyntiTiedot(kalastaja1); 
    assertEquals("From: Rekisteri line: 116", 2, loytyneet.size()); 
    assertEquals("From: Rekisteri line: 117", pyynti1, loytyneet.get(0)); 
    assertEquals("From: Rekisteri line: 118", pyynti3, loytyneet.get(1)); 
    loytyneet = rekisteri.annaPyyntiTiedot(kalastaja2); 
    assertEquals("From: Rekisteri line: 120", 1, loytyneet.size()); 
    assertEquals("From: Rekisteri line: 121", pyynti2, loytyneet.get(1)); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testAnnaKalanTiedot133 */
  @Test
  public void testAnnaKalanTiedot133() {    // Rekisteri: 133
    Rekisteri rekisteri = new Rekisteri(); 
    Kalastaja kalastaja1 = new Kalastaja(), kalastaja2 = new Kalastaja(); 
    kalastaja1.luoArvot(); 
    kalastaja2.luoArvot(); 
    try {
    rekisteri.lisaa(kalastaja1); 
    fail("Rekisteri: 140 Did not throw SailoException");
    } catch(SailoException _e_){ _e_.getMessage(); }
    try {
    rekisteri.lisaa(kalastaja2); 
    fail("Rekisteri: 141 Did not throw SailoException");
    } catch(SailoException _e_){ _e_.getMessage(); }
    int id1 = kalastaja1.getID(); 
    int id2 = kalastaja2.getID(); 
    PyyntiTieto pyynti1 = new PyyntiTieto(id1), pyynti2 = new PyyntiTieto(id2), pyynti3 = new PyyntiTieto(id1); 
    pyynti1.luoarvot(id1); pyynti2.luoarvot(id2); pyynti3.luoarvot(id1); 
    try {
    rekisteri.lisaa(pyynti1); 
    fail("Rekisteri: 146 Did not throw SailoException");
    } catch(SailoException _e_){ _e_.getMessage(); }
    try {
    rekisteri.lisaa(pyynti2); 
    fail("Rekisteri: 147 Did not throw SailoException");
    } catch(SailoException _e_){ _e_.getMessage(); }
    try {
    rekisteri.lisaa(pyynti3); 
    fail("Rekisteri: 148 Did not throw SailoException");
    } catch(SailoException _e_){ _e_.getMessage(); }
    int id01 = pyynti1.getPyyntiID(); 
    int id02 = pyynti2.getPyyntiID(); 
    int id03 = pyynti3.getPyyntiID(); 
    Kala kala1 = new Kala(id01), kala2 = new Kala(id03), kala3 = new Kala(id02), kala4 = new Kala(id01), kala5 = new Kala(id02); 
    try {
    rekisteri.lisaa(kala1); 
    fail("Rekisteri: 153 Did not throw SailoException");
    } catch(SailoException _e_){ _e_.getMessage(); }
    try {
    rekisteri.lisaa(kala2); 
    fail("Rekisteri: 154 Did not throw SailoException");
    } catch(SailoException _e_){ _e_.getMessage(); }
    try {
    rekisteri.lisaa(kala3); 
    fail("Rekisteri: 155 Did not throw SailoException");
    } catch(SailoException _e_){ _e_.getMessage(); }
    List<Kala> loytyneet; 
    loytyneet = rekisteri.annaKalanTiedot(pyynti1); 
    assertEquals("From: Rekisteri line: 158", 2, loytyneet.size()); 
    assertEquals("From: Rekisteri line: 159", kala1, loytyneet.get(0)); 
    assertEquals("From: Rekisteri line: 160", kala4, loytyneet.get(1)); 
    loytyneet = rekisteri.annaKalanTiedot(pyynti2); 
    assertEquals("From: Rekisteri line: 162", 2, loytyneet.size()); 
    assertEquals("From: Rekisteri line: 163", kala3, loytyneet.get(0)); 
    assertEquals("From: Rekisteri line: 164", kala5, loytyneet.get(1)); 
    loytyneet = rekisteri.annaKalanTiedot(pyynti3); 
    assertEquals("From: Rekisteri line: 166", 1, loytyneet.size()); 
    assertEquals("From: Rekisteri line: 167", kala2, loytyneet.get(0)); 
  } // Generated by ComTest END
}